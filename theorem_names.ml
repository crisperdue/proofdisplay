

(* Mapping from theorems to their names.  This code can run at any time
   to update information about theorems bound to top-level names. *)

(* The hash table that maps named theorems to their names.  This is
   generated by iterating through all top-level variable bindings,
   picking up whatever name binding occurs last. *)
(* TODO: Store a list of theorems in each table entry, and modify theorem_name
   to search the list to find one identical to the input. *)
(* TODO: Support multiple names for the same theorem in the API. *)
let theorems_by_name =
  (Hashtbl.create 1000 : (string, (string * thm)) Hashtbl.t);;

let theorem_name theorem =
  try
    let (name, th) = Hashtbl.find theorems_by_name (string_of_thm theorem) in
    if th == theorem then name else ""
  with Not_found -> "";;

let record_theorem_name theorem name =
  Hashtbl.replace theorems_by_name (string_of_thm theorem) (name, theorem);;

let rec record_theorem_name1 (theorem_name,vd) =
  let absty = (normalise_abstype o abstract_typeexpr) vd.val_type in
  match absty with
  | Athm  ->
      let command = (Printf.sprintf "record_theorem_name %s \"%s\";;"
                       theorem_name theorem_name) in
      exec command
  (*
  | Atuple[Athm;Athm]
       -> Some "thm_pair_wrapper"
  *)
  | _ -> ();;


(* Call this to update the theorem-to-name mappings to reflect current
   top-level variable bindings. *)
let record_theorems() =
  let env = Obj.magic !Toploop.toplevel_env in
  do_ocaml_table (fun (name, (_, vd)) ->
                      (* print_string ("Theorem " ^ name ^ "\n"); *)
                      record_theorem_name1(name,vd))
                  env.values;;


